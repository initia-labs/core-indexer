package db

import (
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"text/template"
)

func GenerateAllModels() {
	const sourceFile = "table.go"
	const outputFile = "models.gen.go"

	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, sourceFile, nil, parser.AllErrors)
	if err != nil {
		log.Fatalf("parse error: %v", err)
	}

	var structs []string
	for _, decl := range node.Decls {
		genDecl, ok := decl.(*ast.GenDecl)
		if !ok || genDecl.Tok != token.TYPE {
			continue
		}
		for _, spec := range genDecl.Specs {
			ts, ok := spec.(*ast.TypeSpec)
			if !ok {
				continue
			}
			if _, ok := ts.Type.(*ast.StructType); ok {
				structs = append(structs, ts.Name.Name)
			}
		}
	}

	if len(structs) == 0 {
		log.Println("no structs found")
		return
	}

	tmpl := template.Must(template.New("models").Parse(`// Code generated by models.go DO NOT EDIT.
package db

var AllModels = []any{
{{- range . }}
	&{{ . }}{},
{{- end }}
}
`))

	out, err := os.Create(outputFile)
	if err != nil {
		log.Fatalf("cannot create file: %v", err)
	}
	defer out.Close()

	err = tmpl.Execute(out, structs)
	if err != nil {
		log.Fatalf("cannot execute template: %v", err)
	}

	log.Println("Generated AllModels with", len(structs), "entries")
}
